/*
 * TreeViewHeaderRenderer.java
 *
 * Created on February 18, 2008, 4:53 PM
 */
package pcgen.gui.proto.util;

import java.awt.Component;
import java.awt.Dimension;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import javax.swing.ButtonModel;
import javax.swing.DefaultButtonModel;
import javax.swing.Icon;
import javax.swing.JButton;
import javax.swing.JTable;
import javax.swing.SwingUtilities;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;
import pcgen.gui.util.SortingConstants;
import pcgen.gui.util.treeview.TreeViewMode;
import pcgen.gui.util.treeview.TreeViewTableModel;

/**
 *
 * @author  Connor Petty <mistercpp2000@gmail.com>
 */
public class TreeViewHeaderRenderer extends javax.swing.JPanel implements TableCellRenderer,
                                                                           SortingConstants
{

    private static final ButtonModel defaultModel = new DefaultButtonModel();
    private final ButtonModel usedModel = new DefaultButtonModel();
    private final JTreeViewTableHeader header;

    /** Creates new form TreeViewHeaderRenderer */
    public TreeViewHeaderRenderer(final JTreeViewTableHeader header)
    {

        this.header = header;
        header.addMouseListener(
                new MouseListener()
                {

                    public void mouseClicked(MouseEvent e)
                    {
                        TableColumn trackedColumn = header.getTrackedColumn();
                        if (trackedColumn == header.getDraggedColumn())
                        {
                            findPressedButton().doClick();
                        }
                    }

                    public void mousePressed(MouseEvent evt)
                    {
                        usedModel.setPressed(true);
                        header.repaint();
                    }

                    public void mouseReleased(MouseEvent e)
                    {
                        usedModel.setPressed(false);
                    }

                    public void mouseEntered(MouseEvent e)
                    {
                    }

                    public void mouseExited(MouseEvent e)
                    {
                    }

                });
        initComponents();
    }

    private JButton findPressedButton()
    {
        Point p = header.getMousePosition();
        Rectangle rect = header.getHeaderRect(header.columnAtPoint(p));
        p.translate(-rect.x, -rect.y);
        JButton button;
        if (p.getX() < treeSortButton.getWidth())
        {
            button = treeSortButton;
        }
        else if (p.getX() < treeSortButton.getWidth() +
                treeViewButton.getWidth())
        {
            button = treeViewButton;
        }
        else
        {
            button = textSortButton;
        }
        return button;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        treeSortButton = new javax.swing.JButton();
        treeViewButton = new javax.swing.JButton();
        textSortButton = new javax.swing.JButton();

        setLayout(new java.awt.BorderLayout());

        treeSortButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                treeSortButtonActionPerformed(evt);
            }
        });
        add(treeSortButton, java.awt.BorderLayout.WEST);

        treeViewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                treeViewButtonActionPerformed(evt);
            }
        });
        add(treeViewButton, java.awt.BorderLayout.CENTER);

        textSortButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textSortButtonActionPerformed(evt);
            }
        });
        add(textSortButton, java.awt.BorderLayout.EAST);
    }// </editor-fold>//GEN-END:initComponents
    private void treeSortButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_treeSortButtonActionPerformed
        if (header.getTableModel().getTreeViewMode() == TreeViewMode.ASCENDING)
        {
            treeSortButton.setIcon(DESCENDING_ICON);
        }
        else
        {
            treeSortButton.setIcon(ASCENDING_ICON);
        }
        header.getTableModel().switchTreeViewMode();
    }//GEN-LAST:event_treeSortButtonActionPerformed

    private void treeViewButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_treeViewButtonActionPerformed
        
    }//GEN-LAST:event_treeViewButtonActionPerformed

    private void textSortButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textSortButtonActionPerformed
        Icon icon = null;
        if (header.getTableModel().getSortedColumn() == 0)
        {
            icon = DESCENDING_ICON;
        }
        else
        {
            icon = ASCENDING_ICON;
        }
        textSortButton.setIcon(icon);
        header.getTableModel().sortColumn(0);
    }//GEN-LAST:event_textSortButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton textSortButton;
    private javax.swing.JButton treeSortButton;
    private javax.swing.JButton treeViewButton;
    // End of variables declaration//GEN-END:variables
    public Component getTableCellRendererComponent(JTable table, Object value,
                                                    boolean isSelected,
                                                    boolean hasFocus, int row,
                                                    int column)
    {
        if (header.getTableModel().getSortedColumn() != 0)
        {
            textSortButton.setIcon(null);
        }
        TableColumn trackedColumn = header.getTrackedColumn();
        if (trackedColumn != null && trackedColumn.getHeaderValue() == null && trackedColumn ==
                header.getDraggedColumn())
        {
            findPressedButton().setModel(usedModel);
        }
        else
        {
            treeViewButton.setModel(defaultModel);
            treeSortButton.setModel(defaultModel);
            textSortButton.setModel(defaultModel);
        }
        treeViewButton.setText(header.getTableModel().getSelectedTreeView().getViewName());
        return this;
    }

}
