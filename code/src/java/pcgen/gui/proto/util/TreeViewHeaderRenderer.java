/*
 * TreeViewHeaderRenderer.java
 *
 * Created on February 18, 2008, 4:53 PM
 */
package pcgen.gui.proto.util;

import java.awt.Component;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import javax.swing.ButtonModel;
import javax.swing.Icon;
import javax.swing.JTable;
import javax.swing.SwingUtilities;
import javax.swing.table.TableCellRenderer;
import pcgen.gui.util.SortingConstants;
import pcgen.gui.util.treeview.TreeViewMode;
import pcgen.gui.util.treeview.TreeViewTableModel;

/**
 *
 * @author  Connor Petty <mistercpp2000@gmail.com>
 */
public class TreeViewHeaderRenderer extends javax.swing.JPanel implements TableCellRenderer,
                                                                           SortingConstants
{

    private final JTreeViewTableHeader header;
    private ButtonModel usedModel = null;

    /** Creates new form TreeViewHeaderRenderer */
    public TreeViewHeaderRenderer(final JTreeViewTableHeader header)
    {

        this.header = header;
        header.addMouseListener(
                new MouseListener()
                {

                    public void mouseClicked(MouseEvent e)
                    {
                        SwingUtilities.convertMouseEvent(header, e, TreeViewHeaderRenderer.this);
                        if (textSortButton.contains(e.getPoint()))
                        {
                            textSortButton.doClick();
                        }
                        else if (treeViewButton.contains(e.getPoint()))
                        {
                            treeViewButton.doClick();
                        }
                        else if (treeSortButton.contains(e.getPoint()))
                        {
                            treeSortButton.doClick();
                        }
                    }

                    public void mousePressed(MouseEvent e)
                    {
                        SwingUtilities.convertMouseEvent(header, e, TreeViewHeaderRenderer.this);
                        if (textSortButton.contains(e.getPoint()))
                        {
                            usedModel = textSortButton.getModel();
                        }
                        else if (treeViewButton.contains(e.getPoint()))
                        {
                            usedModel = treeViewButton.getModel();
                        }
                        else if (treeSortButton.contains(e.getPoint()))
                        {
                            usedModel = treeSortButton.getModel();
                        }
                        usedModel.setPressed(true);
                    }

                    public void mouseReleased(MouseEvent e)
                    {
                        usedModel.setPressed(false);
                    }

                    public void mouseEntered(MouseEvent e)
                    {
                    }

                    public void mouseExited(MouseEvent e)
                    {
                    }

                });
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        treeSortButton = new javax.swing.JButton();
        treeViewButton = new javax.swing.JButton();
        textSortButton = new javax.swing.JButton();

        setLayout(new java.awt.BorderLayout());

        treeSortButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                treeSortButtonActionPerformed(evt);
            }
        });
        add(treeSortButton, java.awt.BorderLayout.WEST);

        treeViewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                treeViewButtonActionPerformed(evt);
            }
        });
        add(treeViewButton, java.awt.BorderLayout.CENTER);

        textSortButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textSortButtonActionPerformed(evt);
            }
        });
        add(textSortButton, java.awt.BorderLayout.EAST);
    }// </editor-fold>//GEN-END:initComponents
    private void treeSortButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_treeSortButtonActionPerformed
        if (header.getTableModel().getTreeViewMode() == TreeViewMode.ASCENDING)
        {
            treeSortButton.setIcon(DESCENDING_ICON);
        }
        else
        {
            treeSortButton.setIcon(ASCENDING_ICON);
        }
        header.getTableModel().switchTreeViewMode();
    }//GEN-LAST:event_treeSortButtonActionPerformed

    private void treeViewButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_treeViewButtonActionPerformed
        
    }//GEN-LAST:event_treeViewButtonActionPerformed

    private void textSortButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textSortButtonActionPerformed
        Icon icon = null;
        if (header.getTableModel().getSortedColumn() == 0)
        {
            icon = DESCENDING_ICON;
        }
        else
        {
            icon = ASCENDING_ICON;
        }
        textSortButton.setIcon(icon);
        header.getTableModel().sortColumn(0);
    }//GEN-LAST:event_textSortButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton textSortButton;
    private javax.swing.JButton treeSortButton;
    private javax.swing.JButton treeViewButton;
    // End of variables declaration//GEN-END:variables
    public Component getTableCellRendererComponent(JTable table, Object value,
                                                    boolean isSelected,
                                                    boolean hasFocus, int row,
                                                    int column)
    {
        if (header.getTableModel().getSortedColumn() != 0)
        {
            textSortButton.setIcon(null);
        }
        treeViewButton.setText(header.getTableModel().getSelectedTreeView().getViewName());
        return this;
    }

}
