/*
 * CheckboxTree.java
 * Copyright 2009 Connor Petty <cpmeister@users.sourceforge.net>
 * 
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 * 
 * Created on Feb 23, 2009, 12:51:11 PM
 */

/*
 * CheckboxTree.java
 *
 * Created on Feb 23, 2009, 12:51:11 PM
 */
package pcgen.gui.proto.util;

import java.awt.Color;
import java.awt.Component;
import java.util.EventObject;
import javax.swing.AbstractCellEditor;
import javax.swing.DefaultCellEditor;
import javax.swing.Icon;
import javax.swing.JCheckBox;
import javax.swing.JTextField;
import javax.swing.JTree;
import javax.swing.UIManager;
import javax.swing.event.CellEditorListener;
import javax.swing.tree.DefaultTreeCellRenderer;
import javax.swing.tree.TreeCellEditor;
import javax.swing.tree.TreeCellRenderer;

/**
 *
 * @author Connor Petty <cpmeister@users.sourceforge.net>
 */
public class CheckboxTree extends javax.swing.JFrame
{

	/** Creates new form CheckboxTree */
	public CheckboxTree()
	{
		initComponents();
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents()
	{
		
		jScrollPane1 = new javax.swing.JScrollPane();
		jTree1 = new javax.swing.JTree();
		
		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
		
		javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("JTree");
		javax.swing.tree.DefaultMutableTreeNode treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("colors");
		javax.swing.tree.DefaultMutableTreeNode treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("true");
		treeNode2.add(treeNode3);
		treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("true");
		treeNode2.add(treeNode3);
		treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("false");
		treeNode2.add(treeNode3);
		treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("false");
		treeNode2.add(treeNode3);
		treeNode1.add(treeNode2);
		treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("sports");
		treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("basketball");
		treeNode2.add(treeNode3);
		treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("soccer");
		treeNode2.add(treeNode3);
		treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("football");
		treeNode2.add(treeNode3);
		treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("hockey");
		treeNode2.add(treeNode3);
		treeNode1.add(treeNode2);
		treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("food");
		treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("hot dogs");
		treeNode2.add(treeNode3);
		treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("pizza");
		treeNode2.add(treeNode3);
		treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("ravioli");
		treeNode2.add(treeNode3);
		treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("bananas");
		treeNode2.add(treeNode3);
		treeNode1.add(treeNode2);
		jTree1.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
		jTree1.setCellEditor(getEditor());
		jTree1.setCellRenderer(getRenderer());
		jTree1.setEditable(true);
		jScrollPane1.setViewportView(jTree1);
		
		getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);
		
		pack();
	}// </editor-fold>//GEN-END:initComponents

	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[])
	{
		java.awt.EventQueue.invokeLater(new Runnable()
		{

			public void run()
			{
				new CheckboxTree().setVisible(true);
			}

		});
	}

	public static class CheckBoxTreeCellRenderer extends JCheckBox implements
			TreeCellRenderer
	{

		public Component getTreeCellRendererComponent(JTree tree, Object value,
													  boolean selected,
													  boolean expanded,
													  boolean leaf, int row,
													  boolean hasFocus)
		{
			System.out.println(value.getClass());
			String stringValue = tree.convertValueToText(value, selected,
														 expanded, leaf, row,
														 hasFocus);
			setText(stringValue);
			this.setSelected(Boolean.valueOf(stringValue));
			if (selected)
			{
				setForeground(UIManager.getColor("Tree.selectionForeground"));
				setBackground(UIManager.getColor("Tree.selectionBackground"));
			}
			else
			{
				setForeground(UIManager.getColor("Tree.textForeground"));
				setBackground(UIManager.getColor("Tree.textBackground"));
			}
			setComponentOrientation(tree.getComponentOrientation());
			return this;
		}

	}


	public TreeCellRenderer getRenderer()
	{
		return new CheckBoxTreeCellRenderer();
	}

	public TreeCellEditor getEditor()
	{
		return new DefaultCellEditor(new JCheckBox());
	}

	private static class CheckBoxTree extends JTree
	{

		public CheckBoxTree()
		{
		}

		private class CheckBoxTreeCellRenderer extends JCheckBox implements
				TreeCellRenderer
		{

			public Component getTreeCellRendererComponent(JTree tree,
														  Object value,
														  boolean selected,
														  boolean expanded,
														  boolean leaf, int row,
														  boolean hasFocus)
			{
				String stringValue = tree.convertValueToText(value, selected,
															 expanded, leaf, row,
															 hasFocus);
				setText(stringValue);
				if (selected)
				{
					setForeground(UIManager.getColor("Tree.selectionForeground"));
					setBackground(UIManager.getColor("Tree.selectionBackground"));
				}
				else
				{
					setForeground(UIManager.getColor("Tree.textForeground"));
					setBackground(UIManager.getColor("Tree.textBackground"));
				}
				setComponentOrientation(tree.getComponentOrientation());
				return this;
			}

		}
	}
	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JScrollPane jScrollPane1;
	private javax.swing.JTree jTree1;
	// End of variables declaration//GEN-END:variables
}
