/*
 * PlayerCharacterEditor.java
 *
 * Created on February 14, 2008, 8:31 PM
 */
package pcgen.gui.proto.editor;

import java.awt.Component;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.util.Arrays;
import java.util.Comparator;
import java.util.EnumSet;
import java.util.List;
import javax.swing.ButtonModel;
import javax.swing.DefaultButtonModel;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JTable;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;
import pcgen.gui.proto.util.JTreeViewTable;
import pcgen.gui.util.treeview.DataView;
import pcgen.gui.util.treeview.DataViewColumn;
import pcgen.gui.util.treeview.TreeView;
import pcgen.gui.util.treeview.TreeViewModel;
import pcgen.gui.util.treeview.TreeViewPath;
import pcgen.util.Comparators;

/**
 *
 * @author  Connor Petty <mistercpp2000@gmail.com>
 */
public class PlayerCharacterEditor extends javax.swing.JFrame {

    /** Creates new form PlayerCharacterEditor */
    public PlayerCharacterEditor() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new JTreeViewTable(new StringModel(), Arrays.asList(1, 5, 4, 3, 6, 4, 2, 6, 2, 7 , 5));

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jScrollPane1.setViewportView(jTable1);

        getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new PlayerCharacterEditor().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
    private class StringModel implements TreeViewModel<Integer>
    {

        public EnumSet<? extends TreeView<Integer>> getTreeViews()
        {
            return EnumSet.allOf(StringView.class);
        }

        public DataView<Integer> getDataView()
        {
            return new IntegerData();
        }
        
    }
    private enum StringView implements TreeView<Integer>
    {
        ONE("one"),
        TWO("two"),
        THREE("three"),
        FOUR("four"),
        FIVE("five"),
        SIX("six"),
        SEVEN("seven"),
        EIGHT("eight"),
        NINE("nine"),
        TEN("ten");
        private final String name;
        
        private StringView(String name)
        {
            this.name = name;
        }
        public String getViewName()
        {
            return name;
        }

        public List<TreeViewPath<Integer>> getPaths(Integer pobj)
        {
            switch(this)
            {
                case ONE:
                    return Arrays.asList(new TreeViewPath<Integer>(pobj, pobj.toString()));
                default:
                    return Arrays.asList(new TreeViewPath<Integer>(pobj));
            }
        }
    }
    private class IntegerData implements DataView<Integer>
    {

        public List<?> getData(Integer obj)
        {
            return Arrays.asList(Integer.numberOfTrailingZeros(obj), Integer.toHexString(obj));
        }

        public List<DataViewColumn<Integer>> getDataColumns()
        {
            Comparator<Integer> comp = Comparators.hashCodeComparator();
            List<DataViewColumn<Integer>> list = Arrays.asList(new DataViewColumn<Integer>("Trailing Zeros", Integer.class, Comparators.integerComparator()),
                    new DataViewColumn<Integer>("Hex String", String.class, comp));
            return list;
        }
    }
}
