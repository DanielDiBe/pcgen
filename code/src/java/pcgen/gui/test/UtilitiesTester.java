/*
 * UtilitiesTester.java
 *
 * Created on February 14, 2008, 8:31 PM
 */
package pcgen.gui.test;

import java.util.Arrays;
import java.util.Calendar;
import java.util.Collections;
import java.util.Date;
import java.util.List;
import pcgen.gui.util.GenericListModel;
import pcgen.gui.util.table.DefaultSortableTableModel;
import pcgen.gui.util.table.SortableTableModel;
import pcgen.gui.util.treeview.DataView;
import pcgen.gui.util.treeview.DataViewColumn;
import pcgen.gui.util.treeview.DefaultDataViewColumn;
import pcgen.gui.util.treeview.TreeView;
import pcgen.gui.util.treeview.TreeViewModel;
import pcgen.gui.util.treeview.TreeViewPath;

/**
 *
 * @author  Connor Petty <mistercpp2000@gmail.com>
 */
public class UtilitiesTester extends javax.swing.JFrame
{

    /** Creates new form UtilitiesTester */
    public UtilitiesTester()
    {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTreeViewSelectionPane1 = new pcgen.gui.util.JTreeViewSelectionPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTreeViewSelectionPane1.setTreeViewModel(new DateModel());
        jTreeViewSelectionPane1.setQuickSearchMode(true);
        getContentPane().add(jTreeViewSelectionPane1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        java.awt.EventQueue.invokeLater(new Runnable()
                                {

                                    public void run()
                                    {
                                        new UtilitiesTester().setVisible(true);
                                    }

                                });
    }

    public SortableTableModel getTableModel()
    {
        return new DefaultSortableTableModel(
                new Object[][]{
            {"sdfa",
             "tegh",
             "wvczs",
             "yuue"
    },
            {"ghjd",
             "asdf",
             "trtw",
             "pin"
    },
            {"hty",
             "iohf",
             "kjffs",
             "sfgj"
    },
            {"dfg",
             "cbnc",
             "mnvx",
             "xssd"
    }
        },
                new String[]{
            "Title 1",
            "Title 2",
            "Title 3",
            "Title 4"
        });
    }

    public TreeViewModel getViewModel()
    {
        return new DateModel();
    }

    private static GenericListModel<Date> getData()
    {
        GenericListModel<Date> list = new GenericListModel<Date>();
        Calendar cal = Calendar.getInstance();
        cal.set(1543, 12, 9);
        list.add(cal.getTime());
        cal.set(1453, 4, 23);
        list.add(cal.getTime());
        cal.set(3734, 7, 18);
        list.add(cal.getTime());
        cal.set(1682, 10, 2);
        list.add(cal.getTime());
        cal.set(6432, 2, 2);
        list.add(cal.getTime());
        cal.set(1543, 9, 12);
        list.add(cal.getTime());
        cal.set(2345, 4, 12);
        list.add(cal.getTime());
        return list;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private pcgen.gui.util.JTreeViewSelectionPane jTreeViewSelectionPane1;
    // End of variables declaration//GEN-END:variables
    private static class DateModel implements TreeViewModel<Date>
    {

        private static List<? extends TreeView<Date>> views = Arrays.asList(DateTree.values());
        private static DataView<Date> data = new DateView();
        private static GenericListModel<Date> datamodel = getData();

        public List<? extends TreeView<Date>> getTreeViews()
        {
            return views;
        }

        public int getDefaultTreeViewIndex()
        {
            return 0;
        }

        public DataView<Date> getDataView()
        {
            return data;
        }

        public GenericListModel<Date> getDataModel()
        {
            return datamodel;
        }

    }

    private static class DateView implements DataView<Date>
    {

        public List<?> getData(Date obj)
        {
            Calendar cal = Calendar.getInstance();
            cal.setTime(obj);
            return Arrays.asList(cal.get(Calendar.MONTH),
                                 cal.get(Calendar.WEEK_OF_MONTH),
                                 cal.get(Calendar.DAY_OF_WEEK));
        }

        public List<? extends DataViewColumn> getDataColumns()
        {
            return Arrays.asList(new DefaultDataViewColumn("Month",
                                                           Integer.class),
                                 new DefaultDataViewColumn("Week", Integer.class),
                                 new DefaultDataViewColumn("Day of Week",
                                                           Integer.class));
        }

    }

    private static enum DateTree implements TreeView<Date>
    {

        TIME("Time"),
        DAY_TIME("Day/Time"),
        MONTH_TIME("Month/Time"),
        MONTH_WEEK_DAY_TIME("Month/Week/Day/Time");
        private String name;

        private DateTree(String name)
        {
            this.name = name;
        }

        public String getViewName()
        {
            return name;
        }

        public List<TreeViewPath<Date>> getPaths(Date pobj)
        {
            Calendar cal = Calendar.getInstance();
            cal.setTime(pobj);
            switch (this)
            {
                case TIME:
                    return Collections.singletonList(new TreeViewPath<Date>(pobj));
                case DAY_TIME:
                    return Collections.singletonList(new TreeViewPath<Date>(pobj,
                                                                            "" +
                                                                            cal.get(Calendar.DAY_OF_MONTH)));
                case MONTH_TIME:
                    return Collections.singletonList(new TreeViewPath<Date>(pobj,
                                                                            "" +
                                                                            cal.get(Calendar.MONTH)));
                case MONTH_WEEK_DAY_TIME:
                    return Collections.singletonList(new TreeViewPath<Date>(pobj,
                                                                            "" +
                                                                            cal.get(Calendar.MONTH),
                                                                            "" +
                                                                            cal.get(Calendar.WEEK_OF_MONTH),
                                                                            "" +
                                                                            cal.get(Calendar.DAY_OF_MONTH)));
                default:
                    return null;
            }
        }

    }
}
